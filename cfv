#! /usr/bin/env python

#    cfv - Command-line File Verify
#    Copyright (C) 2000  Matthew Mueller <donut@azstarnet.com>
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

import getopt, zlib, re, os, string, sys, errno, time #, glob

class Stats:
	verbose=0 # -1=quiet  0=norm  1=noisy
	num=0
	ok=0
	badsize=0
	badcrc=0
	notfound=0
	ferror=0
	bytesread=0

stats=Stats()
version=1.0


def getfilecrc(file):
	global stats
	f=open(file,'r')
	c=zlib.crc32('')
	while 1:
		x=f.read(32768)
		if not len(x):
			return c
		stats.bytesread=stats.bytesread+len(x)
		c=zlib.crc32(x,c)

def testfile(filename,filecrc,filesize=-1):
	global stats
	stats.num=stats.num+1
	try:
		if filesize>=0:
			fs=os.path.getsize(filename)
			if fs!=string.atoi(filesize):
				stats.badsize=stats.badsize+1
				if stats.verbose>=0:
					print '%s : file size does not match (%s!=%i)'%(filename,filesize,fs)
				return -1
		c=getfilecrc(filename)
		if c<0: #the crc func returns a signed int...
			c=2**32L + c
		if c!=string.atol(filecrc,16):
		#if '%X'%c != filecrc:
			stats.badcrc=stats.badcrc+1
			if stats.verbose>=0:
				print '%s : crc does not match (%s!=%X)'%(filename,filecrc,c)
			return -2
	except EnvironmentError, a:
		if a[0]==errno.ENOENT:
			stats.notfound=stats.notfound+1
		else:
			stats.ferror=stats.ferror+1
		if stats.verbose>=0 or a[0]!=errno.ENOENT:
			print '%s : %s'%(filename,a[1])
		return 0
	stats.ok=stats.ok+1
	if stats.verbose>0:
		if filesize>=0:
			print '%s : OK (%i,%s)'%(filename,fs,filecrc)
		else:
			print '%s : OK (%s)'%(filename,filecrc)
		

def testsfv(file,testfiles):
	if stats.verbose>0:
		print 'testing from %s (sfv)'%(file.name)
	rem=re.compile(r'(.+) ([0-9a-fA-F]+)\s*$')
	while 1:
		l=file.readline()
		if not len(l):
			return
		if l[0]==';':
			continue
		x=rem.match(l)
		if x:
			if testfiles:
				if x.group(1) in testfiles:
					testfile(x.group(1),x.group(2))
			else:
				testfile(x.group(1),x.group(2))
def testcsv(file,testfiles):
	if stats.verbose>0:
		print 'testing from %s (csv)'%(file.name)
	rem=re.compile(r'([^,]+),([0-9]+),([0-9a-fA-F]+)')
	while 1:
		l=file.readline()
		if not len(l):
			return
		x=rem.match(l)
		if x:
			if testfiles:
				if x.group(1) in testfiles:
					testfile(x.group(1),x.group(3),x.group(2))
			else:
				testfile(x.group(1),x.group(3),x.group(2))

def test(filename,testfiles):
	global stats
	file=open(filename,'r')
	l=file.readline(1024)#limit max line length to be read for testing, in case its a binary file or something.
	file.seek(0)
	if re.match(r';.*generated by .* on ',l,re.IGNORECASE):
		testsfv(file,testfiles)
	elif re.match(r'[^,]+,[0-9]+,[0-9a-fA-F]+',l):
		testcsv(file,testfiles)
	else:
		print "I don't recognize the type of %s"%filename

def make(type,filename,testfiles):
	global stats
	if os.path.exists(filename):
		print "%s already exists"%filename
		sys.exit(1)
	if not testfiles or not len(testfiles):
		#testfiles=glob.glob('*')
		testfiles=os.listdir('.')
		testfiles.sort()
	file=open(filename,'w')
	if type=='sfv':
		file.write('; Generated by cfv v%s on %s\n'%(version,time.strftime('%Y-%m-%d at %H:%M.%S',time.gmtime(time.time()))))
		file.write(';\n')
		dof=lambda a: '%s %08X\n'%(a,getfilecrc(a))
	elif type=='csv':
		dof=lambda a: '%s,%i,%08X,\n'%(a,os.path.getsize(a),getfilecrc(a))
	else:
		raise Exception, 'huh?'

	for f in testfiles:
		stats.num=stats.num+1
		try:
			s=dof(f)
			file.write(s)
		except EnvironmentError, a:
			if a[0]==errno.ENOENT:
				stats.notfound=stats.notfound+1
			else:
				stats.ferror=stats.ferror+1
			if stats.verbose>=0 or a[0]!=errno.ENOENT:
				print '%s : %s'%(f,a[1])
			continue
		stats.ok=stats.ok+1
	file.close()
		
	
manual=0
mode=0
type='auto'
starttime=time.time()

def printusage():
	print 'Usage: cfv [-v] [-T|-C] [-t type] [-f file] [files...]'
	print '  -T       test mode (default)'
	print '  -C       create mode'
	print '  -t <t>   set type to <t> (sfv, csv, or auto(default))'
	print '  -f <f>   use <f> as list file'
	print '  -v       verbose'
	sys.exit()
def printhelp():
	print 'cfv v%s - Copyright (C) 2000 Matthew Mueller - GPL license'%version
	printusage()

try:
	optlist, args = getopt.getopt(sys.argv[1:], 'TCt:f:vh?')
except getopt.error, a:
	print "cfv: %s"%a
	printusage()
	
for o in optlist:
	if o[0]=='-T':
		mode=0
	elif o[0]=='-C':
		mode=1
	elif o[0]=='-t':
		if not o[1] in ('auto', 'sfv', 'csv'):
			print 'type %s not recognized'%o[1]
			sys.exit(1)
		type=o[1]
	elif o[0]=='-f':
		manual=1 #filename selected manually, don't try to autodetect
		filename=o[1]
		if mode==0:
			if type=='sfv':
				testsfv(open(o[1],'r'),args)
			elif type=='csv':			
				testcsv(open(o[1],'r'),args)
			else:
				test(o[1],args)
		else:
			if type=='sfv' or type=='csv':
				make(type,o[1],args)
			else:
				if o[1][-3:]=='sfv':
					make('sfv',o[1],args)
				elif o[1][-3:]=='csv':
					make('csv',o[1],args)
				else:
					print 'specify a filetype with -t, or use .sfv or .csv extension'
					sys.exit(1)
	elif o[0]=='-v':
		stats.verbose=1
	elif o[0]=='-h' or o[0]=='-?':
		printhelp()

if not manual:
	if mode==0:
		#for a in glob.glob('*.csv')+glob.glob('*.sfv'):#case-sensitive, bleh.
		rem=re.compile(r'\.(csv|sfv)$',re.IGNORECASE)
		for a in os.listdir('.'):
			if rem.search(a):
				test(a,args)
	else:
		f=os.path.basename(os.getcwd())
		if type=='csv':
			make('csv',f+'.csv',args)
		else:
			make('sfv',f+'.sfv',args)#sfv is the default type to make

sys.stdout.write('%i files'%stats.num)
sys.stdout.write(', %i OK' %stats.ok)
if stats.badcrc:
	sys.stdout.write(', %i badcrc' %stats.badcrc)
if stats.badsize:
	sys.stdout.write(', %i badsize' %stats.badsize)
if stats.notfound:
	sys.stdout.write(', %i not found' %stats.notfound)
if stats.ferror:
	sys.stdout.write(', %i file errors' %stats.ferror)

elapsed=time.time()-starttime
sys.stdout.write('.  %.2f seconds, %.1fK/s'%(elapsed,stats.bytesread/elapsed/1024.0))

sys.stdout.write('\n')
